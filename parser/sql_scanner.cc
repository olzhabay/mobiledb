#line 2 "sql_scanner.cc"

#line 4 "sql_scanner.cc"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 0
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */
#include <iostream> 
#include <errno.h>
#include <cstdlib>
#include <cstdio>
#include <cstring>
/* end standard C++ headers. */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern yy_size_t yyleng;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    #define YY_LINENO_REWIND_TO(ptr)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        yy_size_t yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{

	std::streambuf* yy_input_file; 

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	yy_size_t yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

void *yyalloc (yy_size_t  );
void *yyrealloc (void *,yy_size_t  );
void yyfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

#define yytext_ptr yytext
#define YY_INTERACTIVE

#include <FlexLexer.h>

int yyFlexLexer::yywrap() { return 1; }

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 257
#define YY_END_OF_BUFFER 258
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[1053] =
    {   0,
        0,    0,  258,  257,  256,  257,  257,  257,  257,  229,
      230,  228,  232,  257,  227,  211,  211,  257,  231,  240,
      235,  238,  257,  253,  253,  253,  253,  253,  253,  253,
      253,  253,  253,  253,  253,  253,  253,  253,  253,  253,
      253,  253,  253,  253,  253,  253,  253,  253,  253,  257,
      257,  241,    0,  222,  220,    0,  233,    0,  221,  219,
        0,    0,  211,  213,  212,    0,    0,    0,  245,  243,
      239,  242,  237,  244,    0,  246,    0,    0,  253,  253,
      253,  253,    7,  253,    0,  253,  253,  253,  253,   17,
      253,  253,  253,  253,  253,  253,  253,  253,  253,  253,

      253,  253,  253,  253,  253,  253,  253,  253,  253,  253,
      253,  253,  253,  253,   79,  253,   81,   90,  253,  253,
      253,  253,  253,  253,  253,  253,  253,  253,  253,  253,
      253,  253,  123,  253,  128,  253,  253,  253,  253,  253,
      253,  253,  253,  253,  253,  253,  253,  253,  253,  253,
      253,  253,  253,  253,  253,  253,  184,  253,  253,  253,
      253,  253,  253,  253,  253,  253,    0,  253,  253,  253,
        0,  255,    0,  234,    0,    0,  220,    0,    0,    0,
      219,    0,    0,  212,    0,  225,    0,  214,  224,  236,
        0,  250,    0,  252,    0,  251,    1,    2,  253,  253,

        5,    6,    8,  253,    0,  253,  253,  253,  253,   14,
      253,  253,  253,  253,  253,  253,  253,  253,  253,  253,
      253,  253,  253,  253,   46,  253,  253,  253,  253,  253,
       56,  253,  253,  253,  253,  253,  253,  253,  253,  253,
      253,  253,  253,  253,   70,  253,  253,  253,  253,  253,
      253,  253,  253,  253,  253,  253,   87,  253,  253,   93,
      253,  253,  253,  253,  253,  253,  253,  253,  253,  253,
      253,  253,  253,  253,  253,  117,  253,  120,  253,  253,
      253,  253,  130,  253,  253,  253,  253,  253,  253,  253,
      253,  253,  253,  253,  253,  253,  253,  253,  253,  253,

      253,  253,  253,  253,  253,  158,  253,  253,  253,  253,
      253,  253,  165,  172,  253,  253,  253,  253,  253,  253,
      253,  253,  253,  253,  253,  253,  253,  253,  253,  253,
      253,  253,  194,  253,  253,  253,  253,  253,  253,  253,
      253,    0,  208,  253,  253,  254,    0,  220,    0,  219,
        0,  216,    0,  215,  247,  249,  248,  253,  253,  253,
      226,  253,  253,  253,  253,  253,   15,   16,  253,   18,
      253,   20,  253,   22,  253,  253,  253,  253,  253,  253,
      253,  253,  253,  253,  253,  253,  253,   40,  253,  253,
      253,  253,  253,  253,   51,  253,  253,  253,   58,   59,

      253,   60,   61,   63,  253,  253,   66,  253,  253,  253,
      253,  253,  253,   73,   74,  253,  253,  253,  253,  253,
      253,  253,  253,  253,  182,  160,   87,   12,  253,   89,
      253,   92,   94,   95,  253,  253,   98,   99,  253,  253,
      102,  253,  105,  106,  109,  253,  253,  253,  253,  253,
      253,  253,  121,  253,  253,  253,  253,  253,  253,  253,
      253,  253,  253,  253,  138,  140,  253,  253,  253,  253,
      253,  253,  253,  253,  253,  253,  253,  253,  253,  253,
      253,  253,  253,  159,  253,  161,  253,  253,  253,  253,
      253,  253,  253,  253,  253,  253,  253,  178,  179,  180,

      253,  253,  253,  217,  187,  253,  253,  253,  253,  253,
      253,  253,  253,  253,  253,  253,  253,  203,  253,  253,
      206,  253,  223,  209,  253,    0,    0,    0,    0,    3,
      253,  253,  253,  253,  253,  253,  253,  253,  253,  253,
      253,   23,  253,  253,  253,  253,  253,  253,  253,  253,
       32,  253,  253,  253,  253,  253,  253,  253,  253,  253,
      253,  253,  253,  253,  253,  253,  253,  253,  253,  253,
      253,  253,  218,   68,   69,   71,  253,  253,   76,   77,
      253,  253,   93,  253,   83,   84,  253,  253,  253,  253,
      253,  253,   97,  100,  101,  253,  253,  253,  253,  111,

      253,  253,  253,  253,  253,  253,  253,  253,  253,  129,
      131,  253,  253,  253,  253,  136,  137,  139,  253,  253,
      253,  253,  253,  253,  253,  253,  253,  253,  151,  142,
      253,  253,  253,  253,  253,  253,  253,  253,  253,  253,
      253,  253,  253,  253,  175,  253,  253,  253,  253,  253,
      253,  253,  188,  253,  253,  253,  253,  193,  195,  253,
      253,  253,  253,  253,  253,  204,  205,  207,  253,  253,
      253,   10,  253,  253,   13,  253,  253,   21,  253,  253,
       25,  253,  253,  253,  253,  253,   31,  253,   37,  253,
      253,  253,  253,  253,  253,  253,  253,  253,   50,  253,

      253,  253,   57,  253,   62,  253,   65,  253,   69,  253,
      253,   78,   80,   82,  253,   86,  253,  253,  253,  253,
      253,  253,  253,  253,  253,  253,  253,  253,  253,  122,
      253,  253,  126,  253,  253,  253,  253,  253,  142,  253,
      144,  145,  253,  253,  253,  149,  150,  152,  153,  155,
      253,  253,  253,  253,  162,  253,  253,  253,  253,  253,
      253,  253,  253,  253,  253,  253,  253,  253,  253,  189,
      190,  253,  192,  253,  253,  199,  253,  253,  253,  253,
        4,  253,   11,  253,  253,   19,  253,   24,   26,  253,
      253,  253,   30,  253,  253,  253,  253,  253,  253,  253,

       46,   47,   48,   49,  253,  253,  253,  253,   64,   67,
       72,  253,  253,   87,  253,   91,   96,  253,  253,  253,
      253,  253,  253,  253,  253,  253,  253,  119,   46,  253,
      253,  132,  253,  134,  253,  253,  143,  146,  147,  253,
      154,  253,  253,  253,  253,  163,  253,  253,  253,  253,
      253,  253,  253,  253,  253,  253,  253,  186,  253,  253,
      253,  253,  201,  202,  253,  253,  253,  253,  253,  253,
      253,   29,  253,   38,   41,   42,  253,  253,  253,   52,
      253,   54,  253,   75,  253,   88,  253,  107,  108,  253,
      253,  253,  253,  253,  253,  253,  118,  125,  253,  253,

      253,  253,  148,  253,  253,  253,  164,  253,  167,  253,
      173,  253,  253,  253,  253,  183,  185,  191,  196,  197,
      253,  253,  210,  253,  253,  253,   22,   27,  253,  253,
      253,  253,   39,  253,  253,  253,  253,  253,  124,  253,
      103,  253,  253,  113,  253,  113,  253,  253,  253,  133,
      135,  253,  156,  157,  253,  253,  253,  253,  176,  253,
      181,  253,  200,  253,  253,  169,  253,   28,  253,  253,
      253,  253,   44,   45,  253,  253,  253,  253,  253,  112,
      114,  253,  253,  127,  141,  253,  253,  168,  253,  177,
      253,  253,  253,  253,  253,  253,  253,  253,  253,   55,

       85,  253,  253,  253,  253,  253,  253,  253,  253,  253,
      253,  253,   33,   34,   36,  253,  253,  253,  110,  253,
      253,  171,  166,  253,  253,  201,  253,  253,  253,  253,
       53,  253,  253,  116,  174,  198,    9,  253,  253,  253,
      104,  253,  170,  253,   43,  253,  253,  253,   35,  253,
      115,    0
    } ;

static yyconst YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    4,    5,    1,    6,    1,    7,    8,    9,
       10,   11,   12,   13,   14,   15,   16,   17,   18,   19,
       20,   21,   20,   20,   20,   22,   20,   23,   24,   25,
       26,   27,    1,   28,   29,   30,   31,   32,   33,   34,
       35,   36,   37,   38,   39,   40,   41,   42,   43,   44,
       45,   46,   47,   48,   49,   50,   51,   52,   53,   54,
        1,   55,    1,    1,   56,   57,   58,   59,   60,   61,

       62,   63,   64,   65,   66,   67,   68,   69,   70,   71,
       72,   73,   74,   75,   76,   77,   78,   79,   80,   81,
       82,   83,    1,   84,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst YY_CHAR yy_meta[85] =
    {   0,
        1,    1,    2,    1,    3,    4,    1,    5,    1,    1,
        1,    1,    1,    1,    4,    1,    6,    6,    6,    6,
        6,    6,    1,    1,    1,    1,    1,    1,    6,    6,
        6,    6,    6,    6,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    1,    7,    8,    6,    6,    6,
        6,    6,    6,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    1
    } ;

static yyconst flex_uint16_t yy_base[1070] =
    {   0,
        0,    0,  496, 2328, 2328,  464,   82,  432,   83, 2328,
     2328, 2328, 2328,   75,   81,  124,   89,  387, 2328,   87,
     2328,   62,  110,   87,  141,  139,  163,  190,  207,   75,
       94,  210,   81,   93,  127,  235,  234,  254,  120,   83,
      251,  302,  315,  292,  104,  253,  179,  139,  140,  212,
      314, 2328,  215, 2328,  381,  299, 2328,  302, 2328,  375,
      334,  374,  382,  388,  405,   99,  434,    0, 2328, 2328,
      355, 2328, 2328, 2328,  327,  120,  323,  308,    0,  147,
      372,  382,  195,  183,  173,  307,  394,  190,  198,    0,
      284,  399,  428,  404,  234,  424,  444,  309,  367,  387,

      444,  400,  386,  385,  443,  442,  440,  433,  439,  437,
      442,  447,  476,  439,    0,  451,  493,    0,  461,  458,
      447,  486,  499,  503,  508,  483,  500,  511,  506,  498,
      499,  537,    0,  504,  526,  515,  552,  537,  547,  596,
      551,  553,  551,  557,  605,  551,  568,  557,  571,  563,
      565,  606,  578,  609,  577,  615,    0,  634,  656,  616,
      629,  620,  658,  664,  641,  657,    0,  653,  673,  659,
      704, 2328,  305, 2328,  311,  703,  708,  711,  363,  613,
      707,  721,  723,  731,  753,  297,  760,  766,    0, 2328,
      414, 2328,  132, 2328,  177, 2328,    0,    0,  676,  699,

        0,    0,    0,  717,  738,  726,  739,  754,  763,    0,
      764,  759,  765,  766,  758,  770,  762,  762,  795,  777,
      760,  762,  789,  239,  775,  788,  819,  808,  816,  802,
        0,  823,  810,  815,  817,  822,  826,  819,  832,  815,
      824,  818,  835,  838,  842,  828,  830,  834,  831,  848,
      854,  867,  864,  870,  857,  874,  894,  864,  869,  870,
      878,  888,  871,  888,  885,  890,  892,  902,  890,  884,
      198,  902,  897,  910,  894,  907,  896,    0,  915,  928,
      922,  931,  935,  934,  934,  945,  942,  947,  949,  946,
      947,  949,  954,  952,  937,  943,  946,  953,  963,  961,

      961,  969,  970,  966,  987,    0,  966,  979,  989,  994,
      978,  996, 1002,    0,  987, 1005,  996,  993,  997,  991,
      998, 1008,  990, 1007, 1012, 1017, 1011, 1014, 1015, 1023,
     1032, 1036,    0, 1032,  193, 1026, 1054, 1035, 1040, 1055,
     1044,  235,    0, 1047, 1051, 2328, 1090, 1091,  541, 1089,
     1107, 1113, 1120, 1130, 2328, 2328, 2328, 1097, 1100,  183,
     2328, 1108, 1122, 1114, 1111, 1112,    0,    0,  168,    0,
     1130,    0, 1125, 1132, 1123, 1134, 1123, 1132, 1129, 1119,
     1131, 1136, 1122, 1124, 1140, 1131, 1145, 1128, 1165, 1137,
     1150, 1131, 1128, 1163, 1167, 1168, 1178, 1176,    0,    0,

     1180,    0, 1181,    0, 1175, 1172,    0, 1192, 1189, 1187,
     1176, 1192, 1189,    0, 1179, 1180, 1185, 1189, 1186, 1181,
     1194, 1190, 1189, 1222,    0,    0,    0,    0, 1224,    0,
     1209,    0,    0,    0, 1232, 1238,    0,    0, 1224, 1226,
        0, 1234,    0, 1246,    0, 1231, 1241, 1229, 1239, 1232,
     1247, 1236,    0, 1250, 1238, 1244, 1240, 1243, 1253, 1254,
     1263, 1262, 1263, 1278, 1275,    0, 1280, 1275, 1299, 1288,
     1301, 1302, 1295, 1287, 1288, 1296, 1288, 1304, 1289, 1298,
     1309, 1304, 1296,    0, 1303,    0, 1303, 1308, 1310, 1296,
     1301, 1321, 1304, 1316, 1321, 1332, 1343,    0,    0, 1337,

     1348, 1346, 1352,    0,    0, 1346, 1340, 1359, 1356, 1344,
     1360, 1359, 1363, 1364, 1361, 1363, 1363,    0, 1368, 1369,
        0, 1370, 2328,    0, 1371, 1401, 1402, 1400, 1404,    0,
     1356, 1396, 1402, 1403, 1389, 1405, 1388, 1408, 1411, 1411,
     1414,    0, 1398, 1405, 1406, 1401, 1404, 1409, 1406, 1420,
        0, 1412, 1412, 1431, 1424, 1420, 1431, 1436, 1455, 1439,
     1446, 1455, 1458, 1456, 1453, 1453, 1463, 1468, 1466, 1468,
     1455, 1466,    0,    0,  300,    0, 1469, 1472,    0,    0,
     1471, 1474,    0, 1475,    0,    0, 1462, 1462, 1478, 1462,
     1468, 1476,    0,    0,    0, 1471, 1481, 1493, 1481,    0,

     1501, 1510, 1511, 1509, 1520, 1505, 1515, 1516, 1512,    0,
        0, 1517, 1511, 1513, 1528,    0,    0,    0, 1528, 1518,
     1516, 1531, 1517, 1535, 1521, 1531, 1527, 1537,    0,    0,
     1530, 1547, 1529, 1531, 1555, 1548, 1567, 1572, 1568, 1576,
     1580, 1564, 1574, 1577,    0, 1569, 1574, 1569, 1576, 1586,
     1583, 1588,    0, 1589, 1584, 1582, 1592,    0,    0, 1597,
     1590, 1581, 1590, 1604, 1592,    0,    0,    0, 1598, 1604,
     1600,    0, 1601, 1611,    0, 1616, 1627,    0, 1617, 1634,
        0, 1620, 1632, 1641, 1624, 1626,    0, 1627,    0, 1629,
     1636, 1629, 1648, 1649, 1641, 1649, 1635, 1652,    0, 1655,

     1649, 1660,    0, 1663,    0, 1661,    0, 1653,    0, 1658,
     1649,    0,    0,    0, 1679,    0, 1671, 1689, 1690, 1690,
     1689, 1684, 1676, 1694, 1702, 1696,  160, 1701, 1695,    0,
     1705, 1683, 1709, 1707, 1704, 1689, 1694, 1702,    0, 1715,
        0,    0, 1716, 1718, 1722,    0,    0,    0, 1711,    0,
     1722, 1726, 1733, 1730,    0, 1741, 1746, 1751, 1737, 1744,
     1747, 1754, 1762, 1763, 1764, 1746, 1743, 1754, 1751,    0,
        0, 1765,    0, 1751, 1759,    0, 1772, 1756, 1771, 1767,
        0, 1777,    0, 1760, 1762,    0, 1783,    0,    0, 1774,
     1795, 1800,    0,  115, 1801, 1806, 1795, 1796, 1794, 1801,

        0,    0,    0,    0, 1814, 1806, 1801, 1802,    0,    0,
        0, 1803, 1804,    0, 1813,    0,    0, 1813, 1825, 1808,
     1814, 1818, 1817, 1827, 1822, 1828, 1818,    0,    0, 1833,
     1827,    0, 1831,    0, 1844, 1860,    0,    0,    0, 1844,
        0, 1847, 1856, 1852, 1868,    0, 1871, 1861, 1873, 1870,
     1873, 1861, 1864, 1863, 1871, 1865, 1879,    0, 1883, 1883,
     1884, 1872, 1893,    0, 1883, 1878, 1885, 1885, 1886, 1891,
     1906,    0, 1917, 1903,    0,    0, 1912, 1909, 1916,    0,
     1922, 1914, 1930,    0, 1927,    0, 1934,    0,    0, 1922,
     1926, 1922, 1919, 1924, 1936, 1941,    0,    0, 1935, 1934,

     1947, 1948,    0, 1949, 1937, 1938,    0, 1942,    0, 1949,
        0,   91, 1953, 1974, 1964,    0,    0,    0,    0, 1966,
     1962, 1985,    0, 1984, 1970, 1989,    0,    0, 1974, 1994,
     1987, 1978,    0, 1979, 1994, 1996, 1982, 1987,    0, 1981,
     1985, 1996, 2004,    0, 1990,    0, 2008, 2009, 1988,    0,
        0, 1996,    0,    0, 1999, 2012, 2029, 2027,    0, 2034,
        0, 2023,    0, 2025, 2033,    0,   75,    0, 2027, 2035,
     2046, 2047,    0,    0, 2033, 2031, 2050, 2036, 2037,    0,
        0, 2040, 2044,    0,    0, 2048, 2046,    0, 2047,    0,
     2062, 2059, 2063, 2051, 2065, 2066, 2055, 2075, 2070,    0,

        0, 2093, 2070, 2081, 2087, 2083, 2090, 2096, 2093, 2091,
     2096, 2096,    0, 2093,    0, 2098, 2111, 2102,    0, 2097,
     2113,    0,    0, 2104, 2103,    0, 2100, 2098, 2102, 2112,
        0, 2111, 2123,    0,    0,    0,    0, 2110, 2130, 2132,
        0, 2134,    0, 2139,    0, 2138, 2138, 2145,    0, 2157,
        0, 2328, 2218, 2226, 2232, 2235, 2242, 2249, 2257,  114,
     2265, 2273, 2281,   99, 2288, 2295, 2303, 2311, 2319
    } ;

static yyconst flex_int16_t yy_def[1070] =
    {   0,
     1052,    1, 1052, 1052, 1052, 1052, 1053, 1052, 1054, 1052,
     1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052,
     1052, 1052, 1055, 1056, 1056, 1056, 1056, 1056, 1056, 1056,
     1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056,
     1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1057,
     1052, 1052, 1053, 1052, 1052, 1058, 1052, 1054, 1052, 1052,
     1059, 1052, 1052, 1052, 1052, 1052, 1052, 1060, 1052, 1052,
     1052, 1052, 1052, 1052, 1061, 1055, 1062, 1063, 1056, 1056,
     1056, 1056, 1056, 1056, 1052, 1056, 1056, 1056, 1056, 1056,
     1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056,

     1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056,
     1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056,
     1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056,
     1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056,
     1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056,
     1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056,
     1056, 1056, 1056, 1056, 1056, 1056, 1064, 1056, 1056, 1056,
     1057, 1052, 1065, 1052, 1066, 1053, 1053, 1058, 1067, 1054,
     1054, 1059, 1052, 1052, 1052, 1052, 1052, 1052, 1060, 1052,
     1061, 1052, 1062, 1052, 1063, 1052, 1056, 1056, 1056, 1056,

     1056, 1056, 1056, 1056, 1052, 1056, 1056, 1056, 1056, 1056,
     1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056,
     1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056,
     1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056,
     1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056,
     1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056,
     1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056,
     1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056,
     1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056,
     1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056,

     1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056,
     1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056,
     1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056,
     1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056,
     1056, 1064, 1056, 1056, 1056, 1052, 1068, 1066, 1069, 1067,
     1052, 1052, 1052, 1052, 1052, 1052, 1052, 1056, 1056, 1056,
     1052, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056,
     1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056,
     1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056,
     1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056,

     1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056,
     1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056,
     1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056,
     1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056,
     1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056,
     1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056,
     1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056,
     1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056,
     1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056,
     1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056,

     1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056,
     1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056,
     1056, 1056, 1052, 1056, 1056, 1066, 1068, 1067, 1069, 1056,
     1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056,
     1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056,
     1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056,
     1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056,
     1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056,
     1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056,
     1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056,

     1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056,
     1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056,
     1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056,
     1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056,
     1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056,
     1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056,
     1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056,
     1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056,
     1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056,
     1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056,

     1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056,
     1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056,
     1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056,
     1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056,
     1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056,
     1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056,
     1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056,
     1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056,
     1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056,
     1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056,

     1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056,
     1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056,
     1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056,
     1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056,
     1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056,
     1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056,
     1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056,
     1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056,
     1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056,
     1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056,

     1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056,
     1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056,
     1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056,
     1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056,
     1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056,
     1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056,
     1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056,
     1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056,
     1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056,
     1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056,

     1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056,
     1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056,
     1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056,
     1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056,
     1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056,
     1056,    0, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052,
     1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052
    } ;

static yyconst flex_uint16_t yy_nxt[2413] =
    {   0,
        4,    5,    5,    6,    7,    4,    8,    9,   10,   11,
       12,    4,   13,   14,   15,    4,   16,   17,   17,   17,
       17,   17,   18,   19,   20,   21,   22,   23,   24,   25,
       26,   27,   28,   29,   30,   31,   32,   33,   34,   35,
       36,   37,   38,   39,   40,   41,   42,   43,   44,   45,
       46,   47,   48,   49,    4,    4,   50,   24,   25,   26,
       27,   28,   29,   30,   31,   32,   33,   34,   35,   36,
       37,   38,   39,   40,   41,   42,   43,   44,   45,   46,
       47,   48,   49,   51,   54,   59,   55,   73,   74,   62,
       60,   63,   63,   63,   63,   63,   63,   64,   64,   64,

       64,   64,   64,   65,  342,   63,   63,   63,   63,   63,
       63,   70,   71,   72,   75,  186,  186,   77,   80,  189,
      113,   67,  114,  120, 1052,  121,   81, 1052,   82,  122,
      994,  139,  163,   83,  194,   84,   56,   61,   65,  356,
       63,   63,   63,   63,   63,   63,  958,   80,   85,  113,
       67,  114,  120,   66,  121,   81,   67,   82,  122,  123,
      139,  163,   83,  124,   84,  137,   78,   91,  138,  125,
      873,  169,  170,   86,   92,   68, 1052,   87,  197,  196,
       88,   93,   66,   89,   94,   67,  167,   95,  123,  205,
      205,   96,  124,   90,  137,   97,   91,  138,  125,   98,

      169,  170,   86,   92,   68,   99,   87,  197,  100,   88,
       93,  101,   89,   94,  172,  826,   95,   54,  102,   55,
       96,  168,   90,  538,   97,  203,  173,  173,   98,  103,
      204,  104,  211,  357,   99,  107,  105,  100,  532,  108,
      101,  106,  523,  115,  116,  212,  109,  102,  513,  110,
      168,  117,  111,  446,  203,  112,  118,  119,  103,  204,
      104,  211,  130,  126,  107,  105,  173,  127,  108,   56,
      106,  128,  115,  116,  212,  109,  131,  129,  110,  222,
      117,  111,  132,  140,  112,  118,  119,  141,  164,  165,
      142,  130,  126,  143,  389,  133,  127,  134,  166,  135,

      128,   54,  136,  177,   59,  131,  129,  172,  222,   60,
      196,  132,  140,  186,  186,   55,  141,  164,  165,  142,
      709,  703,  143,  213,  133,  194,  134,  166,  135,  192,
      214,  136,  144,  159,  145,  160,   59,  146,  161,  162,
      206,  181,  147,  153,  148,  149,  150,  154,  151,  152,
      155,  156,  213,  178,  207,  230,   61,  157,  231,  214,
      158,  144,  159,  145,  160,  347,  146,  161,  162,  206,
       60,  147,  153,  148,  149,  150,  154,  151,  152,  155,
      156,  190,  179,  207,  230,  175,  157,  231,  182,  158,
       64,   64,   64,   64,   64,   64,   65,  174,   63,   63,

       63,   63,   63,   63,   64,   64,   64,   64,   64,   64,
      200,  198,   69,  201,   67,  232,  192,  349,  355,  199,
      183,  184,  184,  184,  184,  184,  184,  215,  208,  233,
      236,  216,  237,  238,  202,  209,  220,  185,   57,  200,
      198,  210,  201,   67,  232,  187,  221,  187,  199,  183,
      188,  188,  188,  188,  188,  188,  215,  208,  233,  236,
      216,  237,  238,  202,  209,  220,  185,  217,  218,  219,
      210,  223,  234,  239,  225,  221,  224,  226,  240,  242,
      243,  244,  245,  227,  246,  241,  247,  235,  250,   52,
      228,  229,  251,  258,  259, 1052,  217,  218,  219,  260,

      223,  234,  239,  225,  248,  224,  226,  240,  242,  243,
      244,  245,  227,  246,  241,  247,  235,  250,  249,  228,
      229,  251,  258,  259,  252,  261,  253,  262,  260, 1052,
      272,  273,  263,  248,  254,  255,  267,  276,  268,  256,
      257,  264,  274,  265,  266,  277,  278,  249,  350,  269,
      270,  281,  275,  252,  261,  253,  262,  282,  271,  272,
      273,  263,  283,  254,  255,  267,  276,  268,  256,  257,
      264,  274,  265,  266,  277,  278,  279,  280,  269,  270,
      281,  275,  287,  288,  284,  299,  282,  271,  285,  300,
      301,  283,  302,  307,  286,  529,  308,  309,  310,  311,

     1052, 1052,  313,  312,  314,  279,  280,  317, 1052,  321,
     1052,  287,  288,  284,  299,   59, 1052,  285,  300,  301,
       60,  302,  307,  286,  289,  308,  309,  310,  311,  290,
      291,  313,  312,  314,  315,  292,  317,  293,  321,  294,
      295, 1052,  296,  297,  303,  298,  304,  331,  305,  318,
      335,  316,  306,  289,  319,  322,  323,  332,  290,  291,
      320,  333,  324,  315,  292,  334,  293,   61,  294,  295,
      325,  296,  297,  303,  298,  304,  331,  305,  318,  335,
      316,  306,  326,  319,  322,  323,  332,  327,  340,  320,
      333,  324,  328,  341,  334,  329,  338,  336,  343,  325,

      339,  344,  330,  337,  345,   54,  172,   55,  358,   59,
       54,  326,  348,   54,  350,  177,  327,  340,  173,  173,
     1052,  328,  341,   59,  329,  338,  336,  343,  181,  339,
      344,  330,  337,  345,  351, 1052,  351,  358,  359,  352,
      352,  352,  352,  352,  352,  361, 1052,  184,  184,  184,
      184,  184,  184, 1052,  205,  205, 1052,   56,  173,  360,
      346,   61,   56,  185,  353,  178,  353,  359,  362,  354,
      354,  354,  354,  354,  354,  182,  188,  188,  188,  188,
      188,  188,  188,  188,  188,  188,  188,  188,  360,  363,
      364,  366,  185,  367,  368,  369,  371,  362,  372,  373,

      375,  376,  378,  374,  370,  383,  384,  385,  386,  365,
      377,  390, 1052, 1052,  391, 1052,  392,  387,  363,  364,
      366,  388,  367,  368,  369,  371,  379,  372,  373,  375,
      376,  378,  374,  370,  383,  384,  385,  386,  395,  377,
      390,  380,  381,  391,  382,  392,  387,  393,  396,  397,
      388,  394,  398,  399,  400,  379,  401,  402,  403,  404,
      405,  406,  407,  408,  409,  410,  411,  395,  414,  415,
      380,  381,  412,  382,  413,  416,  393,  396,  397,  417,
      394,  398,  399,  400,  418,  401,  402,  403,  404,  405,
      406,  407,  408,  409,  410,  411,  419,  414,  415,  420,

      421,  412,  422,  413,  416,  423,  424, 1052,  417,  431,
      432,  425,  426,  418,  427,  428,  433,  434,  437,  435,
      438,  439,  440,  441,  444,  419,  429,  445,  420,  421,
      442,  422,  447,  448,  423,  424,  430,  436,  431,  432,
      443,  449,  450,  451,  452,  433,  434,  437,  435,  438,
      439,  440,  441,  444,  453,  429,  445,  454,  456,  442,
      455,  447,  448,  457,  460,  430,  436,  458,  459,  443,
      449,  450,  451,  452,  461,  462,  463,  464,  467,  468,
      465,  469,  470,  453,  471,  473,  454,  456,  466,  455,
      474,  472,  457,  460,  475,  476,  458,  459,  477,  478,

      479,  480,  481,  461,  462,  463,  464,  467,  468,  465,
      469,  470,  482,  471,  473,  483,  484,  466,  485,  474,
      472,  486,  487,  475,  476,  488,  489,  477,  478,  479,
      480,  481,  493,  494,  490,  495,  496,  497,  498,  499,
      500,  482,  501,  502,  483,  484,  503,  485,  491,  504,
      486,  487,  492,  505,  488,  489,  506,  508,  507,  509,
      510,  493,  494,  490,  495,  496,  497,  498,  499,  500,
      511,  501,  502,  512,  514,  503,  518,  491,  504,  520,
      519,  492,  505,  515,  516,  506,  508,  507,  509,  510,
      521,  522,  524,  525,  348,  348,  350, 1052, 1052,  511,

     1052, 1052,  512,  514, 1052,  518,  517, 1052,  520,  519,
     1052, 1052,  515,  516, 1052, 1052, 1052, 1052, 1052,  521,
      522,  524,  525,  352,  352,  352,  352,  352,  352,  352,
      352,  352,  352,  352,  352,  517,  354,  354,  354,  354,
      354,  354,  530,  349,  527,  347,  354,  354,  354,  354,
      354,  354,  531,  533,  534,  535,  536,  537,  539,  540,
      541,  542,  543,  544,  545,  546,  547,  548,  549,  550,
      551,  530,  552,  553,  554,  555, 1052,  559,  560,  561,
      562,  531,  533,  534,  535,  536,  537,  539,  540,  541,
      542,  543,  544,  545,  546,  547,  548,  549,  550,  551,

      556,  552,  553,  554,  555,  557,  559,  560,  561,  562,
      563,  558,  564,  565,  566,  567,  568,  569,  570,  571,
      572,  573,  574,  575,  576,  577,  578,  579,  580,  556,
      581,  582,  583,  584,  557,  585,  586,  591, 1052,  563,
      558,  564,  565,  566,  567,  568,  569,  570,  571,  572,
      573,  574,  575,  576,  577,  578,  579,  580,  589,  581,
      582,  583,  584,  587,  585,  586,  591,  588,  592,  590,
      593,  594,  595,  596,  599,  597,  600,  601,  602,  603,
      604,  605,  606,  607,  608,  610,  609,  589,  611,  612,
      613,  614,  587,  598,  615,  616,  588,  592,  590,  593,

      594,  595,  596,  599,  597,  600,  601,  602,  603,  604,
      605,  606,  607,  608,  610,  609,  617,  611,  612,  613,
      614,  618,  598,  615,  616,  619,  620,  621,  622,  623,
      624,  625,  626,  627,  628,  629,  630,  631,  632,  633,
      634,  635,  636,  637,  638,  617,  639,  640,  641,  642,
      618,  643,  644,  645,  619,  620,  621,  622,  623,  624,
      625,  626,  627,  628,  629,  630,  631,  632,  633,  634,
      635,  636,  637,  638,  646,  639,  640,  641,  642,  647,
      643,  644,  645,  648,  649,  651,  652,  653,  654,  655,
      656,  657,  658,  659,  660,  650,  662,  663,  664,  665,

      666,  667,  668,  646,  669,   55,  348,   60,  647,  670,
      661,  350,  648,  649,  651,  652,  653,  654,  655,  656,
      657,  658,  659,  660,  650,  662,  663,  664,  665,  666,
      667,  668,  671,  669,  672,  673,  428,  674,  670,  661,
      675,  676,  677,  678,  679,  680,  681,  682,  683,  684,
      685,  686,  687,  688,  349,  347,  527,  689,  529,  690,
      691,  671,  692,  672,  673,  428,  674,  693,  694,  675,
      676,  677,  678,  679,  680,  681,  682,  683,  684,  685,
      686,  687,  688,  695,  696,  697,  689,  698,  690,  691,
      699,  692,  700,  701,  702,  703,  693,  694,  704,  705,

      706,  707,  708,  710,  711,  712,  713,  714,  715,  716,
      717,  718,  695,  696,  697,  719,  698,  720,  721,  699,
      722,  700,  701,  702,  703,  723,  724,  704,  705,  706,
      707,  708,  710,  711,  712,  713,  714,  715,  716,  717,
      718,  725,  726,  727,  719,  728,  720,  721,  729,  722,
      730,  731,  732,  733,  723,  724,  734,  735,  736,  737,
      738,  739,  740,  741,  742,  743,  744,  745,  746,  747,
      725,  726,  727,  748,  728,  749,  750,  729,  751,  730,
      731,  732,  733,  752,  753,  734,  735,  736,  737,  738,
      739,  740,  741,  742,  743,  744,  745,  746,  747,  755,

      756,  757,  748,  754,  749,  750,  758,  751,  759,  760,
      761,  762,  752,  753,  763,  764,  765,  766,  767,  768,
      769,  770,  771,  772,  773,  774,  775,  776,  755,  756,
      757,  777,  778,  779,  780,  758,  781,  759,  760,  761,
      762,  782,  783,  763,  764,  765,  766,  767,  768,  769,
      770,  771,  772,  773,  774,  775,  776,  784,  785,  786,
      777,  778,  779,  780,  787,  781,  788,  789,  790,  791,
      782,  783,  792,  793,  794,  795,  796,  797,  798,  800,
      801,  802,  803,  804,  805,  806,  784,  785,  786,  799,
      807,  808,  809,  787,  810,  788,  789,  790,  791,  811,

      812,  792,  793,  794,  795,  796,  797,  798,  800,  801,
      802,  803,  804,  805,  806,  813,  814,  815,  799,  807,
      808,  809,  816,  810,  817,  818,  819,  820,  811,  812,
      821,  822,  825,  827,  828,  829,  830,  831,  823,  832,
      833,  834,  835,  836,  813,  814,  815,  837,  838,  824,
      839,  816,  840,  817,  818,  819,  820,  841,  842,  821,
      822,  825,  827,  828,  829,  830,  831,  823,  832,  833,
      834,  835,  836,  843,  844,  845,  837,  838,  824,  839,
      846,  840,  847,  848,  849,  850,  841,  842,  851,  852,
      853,  854,  855,  425,  856,  857,  858,  859,  860,  861,

      862,  863,  843,  844,  845,  864,  865,  866,  867,  846,
      868,  847,  848,  849,  850,  869,  870,  851,  852,  853,
      854,  855,  425,  856,  857,  858,  859,  860,  861,  862,
      863,  871,  872,  874,  864,  865,  866,  867,  875,  868,
      876,  877,  878,  879,  869,  870,  880,  881,  882,  883,
      884,  885,  886,  887,  888,  889,  890,  891,  892,  893,
      871,  872,  874,  894,  897,  898,  899,  875,  895,  876,
      877,  878,  879,  900,  896,  880,  881,  882,  883,  884,
      885,  886,  887,  888,  889,  890,  891,  892,  893,  901,
      902,  903,  894,  897,  898,  899,  904,  895,  905,  426,

      906,  907,  900,  896,  908,  909,  910,  911,  912,  913,
      914,  915,  916,  917,  918,  919,  920,  921,  901,  902,
      903,  922,  923,  924,  925,  904,  926,  905,  426,  906,
      907,  927,  928,  908,  909,  910,  911,  912,  913,  914,
      915,  916,  917,  918,  919,  920,  921,  929,  930,  933,
      922,  923,  924,  925,  934,  926,  935,  936,  937,  938,
      927,  928,  939,  940,  931,  932,  941,  942,  943,  944,
      945,  946,  947,  948,  949,  950,  929,  930,  933,  951,
      952,  953,  954,  934,  955,  935,  936,  937,  938,  956,
      957,  939,  940,  931,  932,  941,  942,  943,  944,  945,

      946,  947,  948,  949,  950,  959,  960,  961,  951,  952,
      953,  954,  962,  955,  963,  964,  965,  966,  956,  957,
      967,  968,  969,  970,  971,  972,  973,  974,  975,  976,
      977,  978,  979,  980,  959,  960,  961,  981,  982,  983,
      984,  962,  985,  963,  964,  965,  966,  986,  987,  967,
      968,  969,  970,  971,  972,  973,  974,  975,  976,  977,
      978,  979,  980,  988,  989,  990,  981,  982,  983,  984,
      991,  985,  992,  993,  995,  996,  986,  987,  997,  998,
      999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008,
     1009, 1010,  988,  989,  990, 1011, 1012, 1013, 1014,  991,

     1015,  992,  993,  995,  996, 1016, 1017,  997,  998,  999,
     1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009,
     1010, 1018, 1019, 1020, 1011, 1012, 1013, 1014, 1021, 1015,
     1022, 1023, 1024, 1025, 1016, 1017, 1026, 1027, 1028, 1029,
     1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039,
     1018, 1019, 1020, 1040, 1041, 1042, 1043, 1021, 1044, 1022,
     1023, 1024, 1025, 1045, 1046, 1026, 1027, 1028, 1029, 1030,
     1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1047,
     1048, 1049, 1040, 1041, 1042, 1043, 1050, 1044, 1051, 1052,
     1052, 1052, 1045, 1046, 1052, 1052, 1052, 1052, 1052, 1052,

     1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 1047, 1048,
     1049, 1052, 1052, 1052, 1052, 1050, 1052, 1051,   53,   53,
       53,   53,   53,   53,   53,   53,   58,   58,   58,   58,
       58,   58,   58,   58,   76,   76,   76,   76,   76,   76,
       79,   79,  171,  171,  171,  171,  171,  171,  171,  176,
      176,  176,  176,  176,  176,  176,  176,  180,  180,  180,
      180,  180,  180,  180,  180,  191,  191, 1052,  191,  191,
      191,  191,  191,  193,  193,  193,  193, 1052,  193,  193,
      193,  195,  195,  195,  195,  195,  195,  195,  173,  173,
      173,  173,  173,  173,  173,  175, 1052,  175,  175,  175,

      175,  175,  175,  179, 1052,  179,  179,  179,  179,  179,
      179,  526, 1052,  526,  526,  526,  526,  526,  526,  528,
     1052,  528,  528,  528,  528,  528,  528,    3, 1052, 1052,
     1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052,
     1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052,
     1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052,
     1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052,
     1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052,
     1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052,
     1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052,

     1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052,
     1052, 1052
    } ;

static yyconst flex_int16_t yy_chk[2413] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    7,    9,    7,   22,   22,   14,
        9,   14,   14,   14,   14,   14,   14,   15,   15,   15,

       15,   15,   15,   17, 1064,   17,   17,   17,   17,   17,
       17,   20,   20,   20,   23,   66,   66,   23,   24, 1060,
       30,   17,   31,   33,   76,   34,   24,   76,   24,   34,
      967,   40,   45,   24,  193,   24,    7,    9,   16,  193,
       16,   16,   16,   16,   16,   16,  912,   24,   25,   30,
       17,   31,   33,   16,   34,   24,   16,   24,   34,   35,
       40,   45,   24,   35,   24,   39,   23,   26,   39,   35,
      794,   48,   49,   25,   26,   16,   76,   25,   80,  195,
       25,   26,   16,   25,   26,   16,   47,   26,   35,   85,
       85,   27,   35,   25,   39,   27,   26,   39,   35,   27,

       48,   49,   25,   26,   16,   27,   25,   80,   27,   25,
       26,   27,   25,   26,   50,  727,   26,   53,   28,   53,
       27,   47,   25,  369,   27,   83,   50,   50,   27,   28,
       84,   28,   88,  195,   27,   29,   28,   27,  360,   29,
       27,   28,  342,   32,   32,   89,   29,   28,  335,   29,
       47,   32,   29,  271,   83,   29,   32,   32,   28,   84,
       28,   88,   37,   36,   29,   28,   50,   36,   29,   53,
       28,   36,   32,   32,   89,   29,   37,   36,   29,   95,
       32,   29,   37,   41,   29,   32,   32,   41,   46,   46,
       41,   37,   36,   41,  224,   38,   36,   38,   46,   38,

       36,   56,   38,   56,   58,   37,   36,  173,   95,   58,
       78,   37,   41,  186,  186,  175,   41,   46,   46,   41,
      575,  575,   41,   91,   38,   77,   38,   46,   38,   75,
       91,   38,   42,   44,   42,   44,   61,   42,   44,   44,
       86,   61,   42,   43,   42,   42,   42,   43,   42,   42,
       43,   43,   91,   56,   86,   98,   58,   43,   98,   91,
       43,   42,   44,   42,   44,  175,   42,   44,   44,   86,
      179,   42,   43,   42,   42,   42,   43,   42,   42,   43,
       43,   71,   60,   86,   98,   55,   43,   98,   61,   43,
       62,   62,   62,   62,   62,   62,   63,   51,   63,   63,

       63,   63,   63,   63,   64,   64,   64,   64,   64,   64,
       82,   81,   18,   82,   63,   99,  191,  179,  191,   81,
       64,   65,   65,   65,   65,   65,   65,   92,   87,  100,
      102,   92,  103,  104,   82,   87,   94,   65,    8,   82,
       81,   87,   82,   63,   99,   67,   94,   67,   81,   64,
       67,   67,   67,   67,   67,   67,   92,   87,  100,  102,
       92,  103,  104,   82,   87,   94,   65,   93,   93,   93,
       87,   96,  101,  105,   97,   94,   96,   97,  106,  107,
      108,  109,  110,   97,  111,  106,  112,  101,  114,    6,
       97,   97,  116,  119,  120,    3,   93,   93,   93,  121,

       96,  101,  105,   97,  113,   96,   97,  106,  107,  108,
      109,  110,   97,  111,  106,  112,  101,  114,  113,   97,
       97,  116,  119,  120,  117,  122,  117,  123,  121,    0,
      126,  127,  123,  113,  117,  117,  125,  129,  125,  117,
      117,  124,  128,  124,  124,  130,  131,  113,  349,  125,
      125,  134,  128,  117,  122,  117,  123,  135,  125,  126,
      127,  123,  136,  117,  117,  125,  129,  125,  117,  117,
      124,  128,  124,  124,  130,  131,  132,  132,  125,  125,
      134,  128,  138,  139,  137,  141,  135,  125,  137,  142,
      143,  136,  144,  146,  137,  349,  147,  148,  148,  149,

        0,    0,  150,  149,  151,  132,  132,  153,    0,  155,
        0,  138,  139,  137,  141,  180,    0,  137,  142,  143,
      180,  144,  146,  137,  140,  147,  148,  148,  149,  140,
      140,  150,  149,  151,  152,  140,  153,  140,  155,  140,
      140,    0,  140,  140,  145,  140,  145,  160,  145,  154,
      162,  152,  145,  140,  154,  156,  156,  161,  140,  140,
      154,  161,  158,  152,  140,  161,  140,  180,  140,  140,
      158,  140,  140,  145,  140,  145,  160,  145,  154,  162,
      152,  145,  158,  154,  156,  156,  161,  159,  165,  154,
      161,  158,  159,  166,  161,  159,  164,  163,  168,  158,

      164,  169,  159,  163,  170,  176,  171,  176,  199,  181,
      177,  158,  177,  178,  181,  178,  159,  165,  171,  171,
        0,  159,  166,  182,  159,  164,  163,  168,  182,  164,
      169,  159,  163,  170,  183,    0,  183,  199,  200,  183,
      183,  183,  183,  183,  183,  205,    0,  184,  184,  184,
      184,  184,  184,    0,  205,  205,    0,  176,  171,  204,
      171,  181,  177,  184,  185,  178,  185,  200,  206,  185,
      185,  185,  185,  185,  185,  182,  187,  187,  187,  187,
      187,  187,  188,  188,  188,  188,  188,  188,  204,  207,
      208,  209,  184,  211,  212,  213,  214,  206,  214,  215,

      216,  217,  218,  215,  213,  220,  221,  222,  222,  208,
      217,  225,    0,    0,  225,    0,  226,  223,  207,  208,
      209,  223,  211,  212,  213,  214,  219,  214,  215,  216,
      217,  218,  215,  213,  220,  221,  222,  222,  228,  217,
      225,  219,  219,  225,  219,  226,  223,  227,  229,  230,
      223,  227,  232,  233,  234,  219,  235,  236,  237,  238,
      239,  240,  240,  241,  242,  243,  244,  228,  246,  247,
      219,  219,  245,  219,  245,  248,  227,  229,  230,  249,
      227,  232,  233,  234,  250,  235,  236,  237,  238,  239,
      240,  240,  241,  242,  243,  244,  251,  246,  247,  252,

      253,  245,  254,  245,  248,  255,  256,    0,  249,  258,
      259,  257,  257,  250,  257,  257,  260,  261,  263,  262,
      264,  265,  266,  267,  269,  251,  257,  270,  252,  253,
      268,  254,  272,  273,  255,  256,  257,  262,  258,  259,
      268,  274,  275,  276,  277,  260,  261,  263,  262,  264,
      265,  266,  267,  269,  279,  257,  270,  280,  281,  268,
      280,  272,  273,  282,  284,  257,  262,  283,  283,  268,
      274,  275,  276,  277,  285,  286,  287,  288,  290,  291,
      289,  292,  293,  279,  294,  295,  280,  281,  289,  280,
      296,  294,  282,  284,  297,  298,  283,  283,  299,  300,

      301,  302,  303,  285,  286,  287,  288,  290,  291,  289,
      292,  293,  304,  294,  295,  305,  307,  289,  308,  296,
      294,  309,  310,  297,  298,  311,  312,  299,  300,  301,
      302,  303,  315,  316,  313,  317,  318,  319,  320,  321,
      322,  304,  323,  324,  305,  307,  325,  308,  313,  326,
      309,  310,  313,  327,  311,  312,  328,  329,  328,  330,
      331,  315,  316,  313,  317,  318,  319,  320,  321,  322,
      332,  323,  324,  334,  336,  325,  338,  313,  326,  339,
      338,  313,  327,  337,  337,  328,  329,  328,  330,  331,
      340,  341,  344,  345,  347,  348,  350,    0,    0,  332,

        0,    0,  334,  336,    0,  338,  337,    0,  339,  338,
        0,    0,  337,  337,    0,    0,    0,    0,    0,  340,
      341,  344,  345,  351,  351,  351,  351,  351,  351,  352,
      352,  352,  352,  352,  352,  337,  353,  353,  353,  353,
      353,  353,  358,  350,  347,  348,  354,  354,  354,  354,
      354,  354,  359,  362,  363,  364,  365,  366,  371,  373,
      374,  375,  376,  377,  378,  379,  380,  381,  382,  383,
      384,  358,  385,  386,  387,  388,    0,  390,  391,  392,
      393,  359,  362,  363,  364,  365,  366,  371,  373,  374,
      375,  376,  377,  378,  379,  380,  381,  382,  383,  384,

      389,  385,  386,  387,  388,  389,  390,  391,  392,  393,
      394,  389,  395,  396,  397,  398,  401,  403,  405,  406,
      408,  409,  410,  411,  412,  413,  415,  416,  417,  389,
      418,  419,  420,  421,  389,  422,  423,  431,    0,  394,
      389,  395,  396,  397,  398,  401,  403,  405,  406,  408,
      409,  410,  411,  412,  413,  415,  416,  417,  429,  418,
      419,  420,  421,  424,  422,  423,  431,  424,  435,  429,
      436,  439,  440,  442,  446,  444,  447,  448,  449,  450,
      451,  452,  454,  455,  456,  457,  456,  429,  458,  459,
      460,  461,  424,  444,  462,  463,  424,  435,  429,  436,

      439,  440,  442,  446,  444,  447,  448,  449,  450,  451,
      452,  454,  455,  456,  457,  456,  464,  458,  459,  460,
      461,  465,  444,  462,  463,  467,  468,  469,  470,  471,
      472,  473,  474,  475,  476,  477,  478,  479,  480,  481,
      482,  483,  485,  487,  488,  464,  489,  490,  491,  492,
      465,  493,  494,  495,  467,  468,  469,  470,  471,  472,
      473,  474,  475,  476,  477,  478,  479,  480,  481,  482,
      483,  485,  487,  488,  496,  489,  490,  491,  492,  497,
      493,  494,  495,  500,  501,  502,  503,  506,  507,  508,
      509,  510,  511,  512,  513,  501,  514,  515,  516,  517,

      519,  520,  522,  496,  525,  526,  527,  528,  497,  531,
      513,  529,  500,  501,  502,  503,  506,  507,  508,  509,
      510,  511,  512,  513,  501,  514,  515,  516,  517,  519,
      520,  522,  532,  525,  533,  534,  535,  536,  531,  513,
      537,  538,  539,  540,  541,  543,  544,  545,  546,  547,
      548,  549,  550,  552,  528,  526,  527,  553,  529,  554,
      555,  532,  556,  533,  534,  535,  536,  557,  558,  537,
      538,  539,  540,  541,  543,  544,  545,  546,  547,  548,
      549,  550,  552,  559,  560,  561,  553,  562,  554,  555,
      563,  556,  564,  565,  566,  567,  557,  558,  568,  569,

      570,  571,  572,  577,  578,  581,  582,  584,  587,  588,
      589,  590,  559,  560,  561,  591,  562,  592,  596,  563,
      597,  564,  565,  566,  567,  598,  599,  568,  569,  570,
      571,  572,  577,  578,  581,  582,  584,  587,  588,  589,
      590,  601,  602,  603,  591,  604,  592,  596,  605,  597,
      606,  607,  608,  609,  598,  599,  612,  613,  614,  615,
      619,  620,  621,  622,  623,  624,  625,  626,  627,  628,
      601,  602,  603,  631,  604,  632,  633,  605,  634,  606,
      607,  608,  609,  635,  636,  612,  613,  614,  615,  619,
      620,  621,  622,  623,  624,  625,  626,  627,  628,  637,

      638,  639,  631,  636,  632,  633,  640,  634,  641,  642,
      643,  644,  635,  636,  646,  647,  648,  649,  650,  651,
      652,  654,  655,  656,  657,  660,  661,  662,  637,  638,
      639,  663,  664,  665,  669,  640,  670,  641,  642,  643,
      644,  671,  673,  646,  647,  648,  649,  650,  651,  652,
      654,  655,  656,  657,  660,  661,  662,  674,  676,  677,
      663,  664,  665,  669,  679,  670,  680,  682,  683,  684,
      671,  673,  685,  686,  688,  690,  691,  692,  693,  694,
      695,  696,  697,  698,  700,  701,  674,  676,  677,  693,
      702,  704,  706,  679,  708,  680,  682,  683,  684,  710,

      711,  685,  686,  688,  690,  691,  692,  693,  694,  695,
      696,  697,  698,  700,  701,  715,  717,  718,  693,  702,
      704,  706,  719,  708,  720,  721,  722,  723,  710,  711,
      724,  725,  726,  728,  729,  731,  732,  733,  725,  734,
      735,  736,  737,  738,  715,  717,  718,  740,  743,  725,
      744,  719,  745,  720,  721,  722,  723,  749,  751,  724,
      725,  726,  728,  729,  731,  732,  733,  725,  734,  735,
      736,  737,  738,  752,  753,  754,  740,  743,  725,  744,
      756,  745,  757,  758,  759,  760,  749,  751,  761,  762,
      763,  764,  765,  766,  767,  768,  769,  772,  774,  775,

      777,  778,  752,  753,  754,  779,  780,  782,  784,  756,
      785,  757,  758,  759,  760,  787,  790,  761,  762,  763,
      764,  765,  766,  767,  768,  769,  772,  774,  775,  777,
      778,  791,  792,  795,  779,  780,  782,  784,  796,  785,
      797,  798,  799,  800,  787,  790,  805,  806,  807,  808,
      812,  813,  815,  818,  819,  820,  821,  822,  823,  824,
      791,  792,  795,  825,  827,  830,  831,  796,  826,  797,
      798,  799,  800,  833,  826,  805,  806,  807,  808,  812,
      813,  815,  818,  819,  820,  821,  822,  823,  824,  835,
      836,  840,  825,  827,  830,  831,  842,  826,  843,  844,

      845,  847,  833,  826,  848,  849,  850,  851,  852,  853,
      854,  855,  856,  857,  859,  860,  861,  862,  835,  836,
      840,  863,  865,  866,  867,  842,  868,  843,  844,  845,
      847,  869,  870,  848,  849,  850,  851,  852,  853,  854,
      855,  856,  857,  859,  860,  861,  862,  871,  873,  874,
      863,  865,  866,  867,  877,  868,  878,  879,  881,  882,
      869,  870,  883,  885,  873,  873,  887,  890,  891,  892,
      893,  894,  895,  896,  899,  900,  871,  873,  874,  901,
      902,  904,  905,  877,  906,  878,  879,  881,  882,  908,
      910,  883,  885,  873,  873,  887,  890,  891,  892,  893,

      894,  895,  896,  899,  900,  913,  914,  915,  901,  902,
      904,  905,  920,  906,  921,  922,  924,  925,  908,  910,
      926,  929,  930,  931,  932,  934,  935,  936,  937,  938,
      940,  941,  942,  943,  913,  914,  915,  945,  947,  948,
      949,  920,  952,  921,  922,  924,  925,  955,  956,  926,
      929,  930,  931,  932,  934,  935,  936,  937,  938,  940,
      941,  942,  943,  957,  958,  960,  945,  947,  948,  949,
      962,  952,  964,  965,  969,  970,  955,  956,  971,  972,
      975,  976,  977,  978,  979,  982,  983,  986,  987,  989,
      991,  992,  957,  958,  960,  993,  994,  995,  996,  962,

      997,  964,  965,  969,  970,  998,  999,  971,  972,  975,
      976,  977,  978,  979,  982,  983,  986,  987,  989,  991,
      992, 1002, 1003, 1004,  993,  994,  995,  996, 1005,  997,
     1006, 1007, 1008, 1009,  998,  999, 1010, 1011, 1012, 1014,
     1016, 1017, 1018, 1020, 1021, 1024, 1025, 1027, 1028, 1029,
     1002, 1003, 1004, 1030, 1032, 1033, 1038, 1005, 1039, 1006,
     1007, 1008, 1009, 1040, 1042, 1010, 1011, 1012, 1014, 1016,
     1017, 1018, 1020, 1021, 1024, 1025, 1027, 1028, 1029, 1044,
     1046, 1047, 1030, 1032, 1033, 1038, 1048, 1039, 1050,    0,
        0,    0, 1040, 1042,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0, 1044, 1046,
     1047,    0,    0,    0,    0, 1048,    0, 1050, 1053, 1053,
     1053, 1053, 1053, 1053, 1053, 1053, 1054, 1054, 1054, 1054,
     1054, 1054, 1054, 1054, 1055, 1055, 1055, 1055, 1055, 1055,
     1056, 1056, 1057, 1057, 1057, 1057, 1057, 1057, 1057, 1058,
     1058, 1058, 1058, 1058, 1058, 1058, 1058, 1059, 1059, 1059,
     1059, 1059, 1059, 1059, 1059, 1061, 1061,    0, 1061, 1061,
     1061, 1061, 1061, 1062, 1062, 1062, 1062,    0, 1062, 1062,
     1062, 1063, 1063, 1063, 1063, 1063, 1063, 1063, 1065, 1065,
     1065, 1065, 1065, 1065, 1065, 1066,    0, 1066, 1066, 1066,

     1066, 1066, 1066, 1067,    0, 1067, 1067, 1067, 1067, 1067,
     1067, 1068,    0, 1068, 1068, 1068, 1068, 1068, 1068, 1069,
        0, 1069, 1069, 1069, 1069, 1069, 1069, 1052, 1052, 1052,
     1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052,
     1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052,
     1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052,
     1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052,
     1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052,
     1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052,
     1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052,

     1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052,
     1052, 1052
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "sql_scanner.l"
#line 8 "sql_scanner.l"

#include "sql_parser.hh"
#include "sql_scanner.hpp"
#include "sql_driver.hh"
#include <cstdlib>
#include <string>

int oldstate;

#define yyterminate() return sql::Parser::make_END(*driver.loc)
#define YY_USER_ACTION driver.loc->columns(yyleng);
#line 1315 "sql_scanner.cc"

#define INITIAL 0

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
#define ECHO LexerOutput( yytext, yyleng )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
\
	if ( (int)(result = LexerInput( (char *) buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) LexerError( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
#define YY_DECL int yyFlexLexer::yylex()
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin.rdbuf(std::cin.rdbuf());

		if ( ! yyout )
			yyout.rdbuf(std::cout.rdbuf());

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	{
#line 22 "sql_scanner.l"



	driver.loc->step();

 /* keywords */
#line 1454 "sql_scanner.cc"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1053 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 2328 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 28 "sql_scanner.l"
{ return sql::Parser::make_ADD(*driver.loc); }
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 29 "sql_scanner.l"
{ return sql::Parser::make_ALL(*driver.loc); }
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 30 "sql_scanner.l"
{ return sql::Parser::make_ALTER(*driver.loc); }
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 31 "sql_scanner.l"
{ return sql::Parser::make_ANALYZE(*driver.loc); }
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 34 "sql_scanner.l"
{ return sql::Parser::make_AND(*driver.loc); }
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 35 "sql_scanner.l"
{ return sql::Parser::make_ANY(*driver.loc); }
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 36 "sql_scanner.l"
{ return sql::Parser::make_AS(*driver.loc); }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 37 "sql_scanner.l"
{ return sql::Parser::make_ASC(*driver.loc); }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 38 "sql_scanner.l"
{ return sql::Parser::make_AUTO_INCREMENT(*driver.loc); }
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 39 "sql_scanner.l"
{ return sql::Parser::make_BEFORE(*driver.loc); }
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 40 "sql_scanner.l"
{ return sql::Parser::make_BETWEEN(*driver.loc); }
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 41 "sql_scanner.l"
{ return sql::Parser::make_BIGINT(*driver.loc); }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 42 "sql_scanner.l"
{ return sql::Parser::make_BINARY(*driver.loc); }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 43 "sql_scanner.l"
{ return sql::Parser::make_BIT(*driver.loc); }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 44 "sql_scanner.l"
{ return sql::Parser::make_BLOB(*driver.loc); }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 45 "sql_scanner.l"
{ return sql::Parser::make_BOTH(*driver.loc); }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 46 "sql_scanner.l"
{ return sql::Parser::make_BY(*driver.loc); }
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 47 "sql_scanner.l"
{ return sql::Parser::make_CALL(*driver.loc); }
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 48 "sql_scanner.l"
{ return sql::Parser::make_CASCADE(*driver.loc); }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 49 "sql_scanner.l"
{ return sql::Parser::make_CASE(*driver.loc); }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 50 "sql_scanner.l"
{ return sql::Parser::make_CHANGE(*driver.loc); }
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 51 "sql_scanner.l"
{ return sql::Parser::make_CHAR(*driver.loc); }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 52 "sql_scanner.l"
{ return sql::Parser::make_CHECK(*driver.loc); }
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 53 "sql_scanner.l"
{ return sql::Parser::make_COLLATE(*driver.loc); }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 54 "sql_scanner.l"
{ return sql::Parser::make_COLUMN(*driver.loc); }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 55 "sql_scanner.l"
{ return sql::Parser::make_COMMENT(*driver.loc); }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 56 "sql_scanner.l"
{ return sql::Parser::make_CONDITION(*driver.loc); }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 57 "sql_scanner.l"
{ return sql::Parser::make_CONSTRAINT(*driver.loc); }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 58 "sql_scanner.l"
{ return sql::Parser::make_CONTINUE(*driver.loc); }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 59 "sql_scanner.l"
{ return sql::Parser::make_CONVERT(*driver.loc); }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 60 "sql_scanner.l"
{ return sql::Parser::make_CREATE(*driver.loc); }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 61 "sql_scanner.l"
{ return sql::Parser::make_CROSS(*driver.loc); }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 62 "sql_scanner.l"
{ return sql::Parser::make_CURRENT_DATE(*driver.loc); }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 63 "sql_scanner.l"
{ return sql::Parser::make_CURRENT_TIME(*driver.loc); }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 64 "sql_scanner.l"
{ return sql::Parser::make_CURRENT_TIMESTAMP(*driver.loc); }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 65 "sql_scanner.l"
{ return sql::Parser::make_CURRENT_USER(*driver.loc); }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 66 "sql_scanner.l"
{ return sql::Parser::make_CURSOR(*driver.loc); }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 67 "sql_scanner.l"
{ return sql::Parser::make_DATABASE(*driver.loc); }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 68 "sql_scanner.l"
{ return sql::Parser::make_DATABASES(*driver.loc); }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 69 "sql_scanner.l"
{ return sql::Parser::make_DATE(*driver.loc); }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 70 "sql_scanner.l"
{ return sql::Parser::make_DATETIME(*driver.loc); }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 71 "sql_scanner.l"
{ return sql::Parser::make_DAY_HOUR(*driver.loc); }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 72 "sql_scanner.l"
{ return sql::Parser::make_DAY_MICROSECOND(*driver.loc); }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 73 "sql_scanner.l"
{ return sql::Parser::make_DAY_MINUTE(*driver.loc); }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 74 "sql_scanner.l"
{ return sql::Parser::make_DAY_SECOND(*driver.loc); }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 75 "sql_scanner.l"
{ return sql::Parser::make_DECIMAL(*driver.loc); }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 76 "sql_scanner.l"
{ return sql::Parser::make_DECLARE(*driver.loc); }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 77 "sql_scanner.l"
{ return sql::Parser::make_DEFAULT(*driver.loc); }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 78 "sql_scanner.l"
{ return sql::Parser::make_DELAYED(*driver.loc); }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 79 "sql_scanner.l"
{ return sql::Parser::make_DELETE(*driver.loc); }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 80 "sql_scanner.l"
{ return sql::Parser::make_DESC(*driver.loc); }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 81 "sql_scanner.l"
{ return sql::Parser::make_DESCRIBE(*driver.loc); }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 82 "sql_scanner.l"
{ return sql::Parser::make_DETERMINISTIC(*driver.loc); }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 83 "sql_scanner.l"
{ return sql::Parser::make_DISTINCT(*driver.loc); }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 84 "sql_scanner.l"
{ return sql::Parser::make_DISTINCTROW(*driver.loc); }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 85 "sql_scanner.l"
{ return sql::Parser::make_DIV(*driver.loc); }
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 86 "sql_scanner.l"
{ return sql::Parser::make_DOUBLE(*driver.loc); }
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 87 "sql_scanner.l"
{ return sql::Parser::make_DROP(*driver.loc); }
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 88 "sql_scanner.l"
{ return sql::Parser::make_DUAL(*driver.loc); }
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 89 "sql_scanner.l"
{ return sql::Parser::make_EACH(*driver.loc); }
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 90 "sql_scanner.l"
{ return sql::Parser::make_ELSE(*driver.loc); }
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 91 "sql_scanner.l"
{ return sql::Parser::make_ELSEIF(*driver.loc); }
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 92 "sql_scanner.l"
{ return sql::Parser::make_ENUM(*driver.loc); }
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 93 "sql_scanner.l"
{ return sql::Parser::make_ESCAPED(*driver.loc); }
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 94 "sql_scanner.l"
{ return sql::Parser::make_EXISTS(*driver.loc); }
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 95 "sql_scanner.l"
{ return sql::Parser::make_EXIT(*driver.loc); }
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 96 "sql_scanner.l"
{ return sql::Parser::make_EXPLAIN(*driver.loc); }
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 97 "sql_scanner.l"
{ return sql::Parser::make_FETCH(*driver.loc); }
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 98 "sql_scanner.l"
{ return sql::Parser::make_FLOAT(*driver.loc); }
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 99 "sql_scanner.l"
{ return sql::Parser::make_FOR(*driver.loc); }
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 100 "sql_scanner.l"
{ return sql::Parser::make_FORCE(*driver.loc); }
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 101 "sql_scanner.l"
{ return sql::Parser::make_FOREIGN(*driver.loc); }
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 102 "sql_scanner.l"
{ return sql::Parser::make_FROM(*driver.loc); }
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 103 "sql_scanner.l"
{ return sql::Parser::make_FULL(*driver.loc); }
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 104 "sql_scanner.l"
{ return sql::Parser::make_FULLTEXT(*driver.loc); }
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 105 "sql_scanner.l"
{ return sql::Parser::make_GRANT(*driver.loc); }
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 106 "sql_scanner.l"
{ return sql::Parser::make_GROUP(*driver.loc); }
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 107 "sql_scanner.l"
{ return sql::Parser::make_HAVING(*driver.loc); }
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 108 "sql_scanner.l"
{ return sql::Parser::make_IF(*driver.loc); }
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 109 "sql_scanner.l"
{ return sql::Parser::make_IGNORE(*driver.loc); }
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 110 "sql_scanner.l"
{ return sql::Parser::make_IN(*driver.loc); }
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 111 "sql_scanner.l"
{ return sql::Parser::make_INFILE(*driver.loc); }
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 112 "sql_scanner.l"
{ return sql::Parser::make_INNER(*driver.loc); }
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 113 "sql_scanner.l"
{ return sql::Parser::make_INOUT(*driver.loc); }
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 114 "sql_scanner.l"
{ return sql::Parser::make_INSENSITIVE(*driver.loc); }
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 115 "sql_scanner.l"
{ return sql::Parser::make_INSERT(*driver.loc); }
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 116 "sql_scanner.l"
{ return sql::Parser::make_INTEGER(*driver.loc); }
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 117 "sql_scanner.l"
{ return sql::Parser::make_INTERVAL(*driver.loc); }
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 118 "sql_scanner.l"
{ return sql::Parser::make_INTO(*driver.loc); }
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 119 "sql_scanner.l"
{ return sql::Parser::make_IS(*driver.loc); }
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 120 "sql_scanner.l"
{ return sql::Parser::make_ITERATE(*driver.loc); }
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 121 "sql_scanner.l"
{ return sql::Parser::make_JOIN(*driver.loc); }
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 122 "sql_scanner.l"
{ return sql::Parser::make_KEY(*driver.loc); }
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 123 "sql_scanner.l"
{ return sql::Parser::make_KEYS(*driver.loc); }
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 124 "sql_scanner.l"
{ return sql::Parser::make_KILL(*driver.loc); }
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 125 "sql_scanner.l"
{ return sql::Parser::make_LEADING(*driver.loc); }
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 126 "sql_scanner.l"
{ return sql::Parser::make_LEAVE(*driver.loc); }
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 127 "sql_scanner.l"
{ return sql::Parser::make_LEFT(*driver.loc); }
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 128 "sql_scanner.l"
{ return sql::Parser::make_LIKE(*driver.loc); }
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 129 "sql_scanner.l"
{ return sql::Parser::make_LIMIT(*driver.loc); }
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 130 "sql_scanner.l"
{ return sql::Parser::make_LINES(*driver.loc); }
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 131 "sql_scanner.l"
{ return sql::Parser::make_LOAD(*driver.loc); }
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 132 "sql_scanner.l"
{ return sql::Parser::make_LOCALTIME(*driver.loc); }
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 133 "sql_scanner.l"
{ return sql::Parser::make_LOCALTIMESTAMP(*driver.loc); }
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 134 "sql_scanner.l"
{ return sql::Parser::make_LOCK(*driver.loc); }
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 135 "sql_scanner.l"
{ return sql::Parser::make_LONG(*driver.loc); }
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 136 "sql_scanner.l"
{ return sql::Parser::make_LONGBLOB(*driver.loc); }
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 137 "sql_scanner.l"
{ return sql::Parser::make_LONGTEXT(*driver.loc); }
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 138 "sql_scanner.l"
{ return sql::Parser::make_LOOP(*driver.loc); }
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 139 "sql_scanner.l"
{ return sql::Parser::make_LOW_PRIORITY(*driver.loc); }
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 140 "sql_scanner.l"
{ return sql::Parser::make_MATCH(*driver.loc); }
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 141 "sql_scanner.l"
{ return sql::Parser::make_MEDIUMBLOB(*driver.loc); }
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 142 "sql_scanner.l"
{ return sql::Parser::make_MEDIUMINT(*driver.loc); }
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 143 "sql_scanner.l"
{ return sql::Parser::make_MEDIUMTEXT(*driver.loc); }
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 144 "sql_scanner.l"
{ return sql::Parser::make_MINUTE_MICROSECOND(*driver.loc); }
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 145 "sql_scanner.l"
{ return sql::Parser::make_MINUTE_SECOND(*driver.loc); }
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 146 "sql_scanner.l"
{ return sql::Parser::make_MOD(*driver.loc); }
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 147 "sql_scanner.l"
{ return sql::Parser::make_MODIFIES(*driver.loc); }
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 148 "sql_scanner.l"
{ return sql::Parser::make_NATURAL(*driver.loc); }
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 149 "sql_scanner.l"
{ return sql::Parser::make_NOT(*driver.loc); }
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 150 "sql_scanner.l"
{ return sql::Parser::make_NULLX(*driver.loc); }
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 151 "sql_scanner.l"
{ return sql::Parser::make_NUMBER(*driver.loc); }
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 152 "sql_scanner.l"
{ return sql::Parser::make_ON(*driver.loc); }
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 153 "sql_scanner.l"
{ return sql::Parser::make_DUPLICATE(*driver.loc); }
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 154 "sql_scanner.l"
{ return sql::Parser::make_OPTIMIZE(*driver.loc); }
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 155 "sql_scanner.l"
{ return sql::Parser::make_OPTION(*driver.loc); }
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 156 "sql_scanner.l"
{ return sql::Parser::make_OPTIONALLY(*driver.loc); }
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 157 "sql_scanner.l"
{ return sql::Parser::make_OR(*driver.loc); }
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 158 "sql_scanner.l"
{ return sql::Parser::make_ORDER(*driver.loc); }
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 159 "sql_scanner.l"
{ return sql::Parser::make_OUT(*driver.loc); }
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 160 "sql_scanner.l"
{ return sql::Parser::make_OUTER(*driver.loc); }
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 161 "sql_scanner.l"
{ return sql::Parser::make_OUTFILE(*driver.loc); }
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 162 "sql_scanner.l"
{ return sql::Parser::make_PRECISION(*driver.loc); }
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 163 "sql_scanner.l"
{ return sql::Parser::make_PRIMARY(*driver.loc); }
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 164 "sql_scanner.l"
{ return sql::Parser::make_PROCEDURE(*driver.loc); }
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 165 "sql_scanner.l"
{ return sql::Parser::make_PURGE(*driver.loc); }
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 166 "sql_scanner.l"
{ return sql::Parser::make_QUICK(*driver.loc); }
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 167 "sql_scanner.l"
{ return sql::Parser::make_READ(*driver.loc); }
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 168 "sql_scanner.l"
{ return sql::Parser::make_READS(*driver.loc); }
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 169 "sql_scanner.l"
{ return sql::Parser::make_REAL(*driver.loc); }
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 170 "sql_scanner.l"
{ return sql::Parser::make_REFERENCES(*driver.loc); }
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 171 "sql_scanner.l"
{ return sql::Parser::make_REGEXP(*driver.loc); }
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 172 "sql_scanner.l"
{ return sql::Parser::make_RELEASE(*driver.loc); }
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 173 "sql_scanner.l"
{ return sql::Parser::make_RENAME(*driver.loc); }
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 174 "sql_scanner.l"
{ return sql::Parser::make_REPEAT(*driver.loc); }
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 175 "sql_scanner.l"
{ return sql::Parser::make_REPLACE(*driver.loc); }
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 176 "sql_scanner.l"
{ return sql::Parser::make_REQUIRE(*driver.loc); }
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 177 "sql_scanner.l"
{ return sql::Parser::make_RESTRICT(*driver.loc); }
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 178 "sql_scanner.l"
{ return sql::Parser::make_RETURN(*driver.loc); }
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 179 "sql_scanner.l"
{ return sql::Parser::make_REVOKE(*driver.loc); }
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 180 "sql_scanner.l"
{ return sql::Parser::make_RIGHT(*driver.loc); }
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 181 "sql_scanner.l"
{ return sql::Parser::make_ROLLUP(*driver.loc); }
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 182 "sql_scanner.l"
{ return sql::Parser::make_SCHEMA(*driver.loc); }
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 183 "sql_scanner.l"
{ return sql::Parser::make_SCHEMAS(*driver.loc); }
	YY_BREAK
case 155:
YY_RULE_SETUP
#line 184 "sql_scanner.l"
{ return sql::Parser::make_SELECT(*driver.loc); }
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 185 "sql_scanner.l"
{ return sql::Parser::make_SENSITIVE(*driver.loc); }
	YY_BREAK
case 157:
YY_RULE_SETUP
#line 186 "sql_scanner.l"
{ return sql::Parser::make_SEPARATOR(*driver.loc); }
	YY_BREAK
case 158:
YY_RULE_SETUP
#line 187 "sql_scanner.l"
{ return sql::Parser::make_SET(*driver.loc); }
	YY_BREAK
case 159:
YY_RULE_SETUP
#line 188 "sql_scanner.l"
{ return sql::Parser::make_SHOW(*driver.loc); }
	YY_BREAK
case 160:
YY_RULE_SETUP
#line 189 "sql_scanner.l"
{ return sql::Parser::make_SMALLINT(*driver.loc); }
	YY_BREAK
case 161:
YY_RULE_SETUP
#line 190 "sql_scanner.l"
{ return sql::Parser::make_SOME(*driver.loc); }
	YY_BREAK
case 162:
YY_RULE_SETUP
#line 191 "sql_scanner.l"
{ return sql::Parser::make_SONAME(*driver.loc); }
	YY_BREAK
case 163:
YY_RULE_SETUP
#line 192 "sql_scanner.l"
{ return sql::Parser::make_SPATIAL(*driver.loc); }
	YY_BREAK
case 164:
YY_RULE_SETUP
#line 193 "sql_scanner.l"
{ return sql::Parser::make_SPECIFIC(*driver.loc); }
	YY_BREAK
case 165:
YY_RULE_SETUP
#line 194 "sql_scanner.l"
{ return sql::Parser::make_SQL(*driver.loc); }
	YY_BREAK
case 166:
YY_RULE_SETUP
#line 195 "sql_scanner.l"
{ return sql::Parser::make_SQLEXCEPTION(*driver.loc); }
	YY_BREAK
case 167:
YY_RULE_SETUP
#line 196 "sql_scanner.l"
{ return sql::Parser::make_SQLSTATE(*driver.loc); }
	YY_BREAK
case 168:
YY_RULE_SETUP
#line 197 "sql_scanner.l"
{ return sql::Parser::make_SQLWARNING(*driver.loc); }
	YY_BREAK
case 169:
YY_RULE_SETUP
#line 198 "sql_scanner.l"
{ return sql::Parser::make_BIG_RESULT(*driver.loc); }
	YY_BREAK
case 170:
YY_RULE_SETUP
#line 199 "sql_scanner.l"
{ return sql::Parser::make_CALC_FOUND_ROWS(*driver.loc); }
	YY_BREAK
case 171:
YY_RULE_SETUP
#line 200 "sql_scanner.l"
{ return sql::Parser::make_SMALL_RESULT(*driver.loc); }
	YY_BREAK
case 172:
YY_RULE_SETUP
#line 201 "sql_scanner.l"
{ return sql::Parser::make_SSL(*driver.loc); }
	YY_BREAK
case 173:
YY_RULE_SETUP
#line 202 "sql_scanner.l"
{ return sql::Parser::make_STARTING(*driver.loc); }
	YY_BREAK
case 174:
YY_RULE_SETUP
#line 203 "sql_scanner.l"
{ return sql::Parser::make_STRAIGHT_JOIN(*driver.loc); }
	YY_BREAK
case 175:
YY_RULE_SETUP
#line 204 "sql_scanner.l"
{ return sql::Parser::make_TABLE(*driver.loc); }
	YY_BREAK
case 176:
YY_RULE_SETUP
#line 205 "sql_scanner.l"
{ return sql::Parser::make_TEMPORARY(*driver.loc); }
	YY_BREAK
case 177:
YY_RULE_SETUP
#line 206 "sql_scanner.l"
{ return sql::Parser::make_TERMINATED(*driver.loc); }
	YY_BREAK
case 178:
YY_RULE_SETUP
#line 207 "sql_scanner.l"
{ return sql::Parser::make_TEXT(*driver.loc); }
	YY_BREAK
case 179:
YY_RULE_SETUP
#line 208 "sql_scanner.l"
{ return sql::Parser::make_THEN(*driver.loc); }
	YY_BREAK
case 180:
YY_RULE_SETUP
#line 209 "sql_scanner.l"
{ return sql::Parser::make_TIME(*driver.loc); }
	YY_BREAK
case 181:
YY_RULE_SETUP
#line 210 "sql_scanner.l"
{ return sql::Parser::make_TIMESTAMP(*driver.loc); }
	YY_BREAK
case 182:
YY_RULE_SETUP
#line 211 "sql_scanner.l"
{ return sql::Parser::make_TINYINT(*driver.loc); }
	YY_BREAK
case 183:
YY_RULE_SETUP
#line 212 "sql_scanner.l"
{ return sql::Parser::make_TINYTEXT(*driver.loc); }
	YY_BREAK
case 184:
YY_RULE_SETUP
#line 213 "sql_scanner.l"
{ return sql::Parser::make_TO(*driver.loc); }
	YY_BREAK
case 185:
YY_RULE_SETUP
#line 214 "sql_scanner.l"
{ return sql::Parser::make_TRAILING(*driver.loc); }
	YY_BREAK
case 186:
YY_RULE_SETUP
#line 215 "sql_scanner.l"
{ return sql::Parser::make_TRIGGER(*driver.loc); }
	YY_BREAK
case 187:
YY_RULE_SETUP
#line 216 "sql_scanner.l"
{ return sql::Parser::make_UNDO(*driver.loc); }
	YY_BREAK
case 188:
YY_RULE_SETUP
#line 217 "sql_scanner.l"
{ return sql::Parser::make_UNION(*driver.loc); }
	YY_BREAK
case 189:
YY_RULE_SETUP
#line 218 "sql_scanner.l"
{ return sql::Parser::make_UNIQUE(*driver.loc); }
	YY_BREAK
case 190:
YY_RULE_SETUP
#line 219 "sql_scanner.l"
{ return sql::Parser::make_UNLOCK(*driver.loc); }
	YY_BREAK
case 191:
YY_RULE_SETUP
#line 220 "sql_scanner.l"
{ return sql::Parser::make_UNSIGNED(*driver.loc); }
	YY_BREAK
case 192:
YY_RULE_SETUP
#line 221 "sql_scanner.l"
{ return sql::Parser::make_UPDATE(*driver.loc); }
	YY_BREAK
case 193:
YY_RULE_SETUP
#line 222 "sql_scanner.l"
{ return sql::Parser::make_USAGE(*driver.loc); }
	YY_BREAK
case 194:
YY_RULE_SETUP
#line 223 "sql_scanner.l"
{ return sql::Parser::make_USE(*driver.loc); }
	YY_BREAK
case 195:
YY_RULE_SETUP
#line 224 "sql_scanner.l"
{ return sql::Parser::make_USING(*driver.loc); }
	YY_BREAK
case 196:
YY_RULE_SETUP
#line 225 "sql_scanner.l"
{ return sql::Parser::make_UTC_DATE(*driver.loc); }
	YY_BREAK
case 197:
YY_RULE_SETUP
#line 226 "sql_scanner.l"
{ return sql::Parser::make_UTC_TIME(*driver.loc); }
	YY_BREAK
case 198:
YY_RULE_SETUP
#line 227 "sql_scanner.l"
{ return sql::Parser::make_UTC_TIMESTAMP(*driver.loc); }
	YY_BREAK
case 199:
YY_RULE_SETUP
#line 228 "sql_scanner.l"
{ return sql::Parser::make_VALUES(*driver.loc); }
	YY_BREAK
case 200:
YY_RULE_SETUP
#line 229 "sql_scanner.l"
{ return sql::Parser::make_VARBINARY(*driver.loc); }
	YY_BREAK
case 201:
YY_RULE_SETUP
#line 230 "sql_scanner.l"
{ return sql::Parser::make_VARCHAR(*driver.loc); }
	YY_BREAK
case 202:
YY_RULE_SETUP
#line 231 "sql_scanner.l"
{ return sql::Parser::make_VARYING(*driver.loc); }
	YY_BREAK
case 203:
YY_RULE_SETUP
#line 232 "sql_scanner.l"
{ return sql::Parser::make_WHEN(*driver.loc); }
	YY_BREAK
case 204:
YY_RULE_SETUP
#line 233 "sql_scanner.l"
{ return sql::Parser::make_WHERE(*driver.loc); }
	YY_BREAK
case 205:
YY_RULE_SETUP
#line 234 "sql_scanner.l"
{ return sql::Parser::make_WHILE(*driver.loc); }
	YY_BREAK
case 206:
YY_RULE_SETUP
#line 235 "sql_scanner.l"
{ return sql::Parser::make_WITH(*driver.loc); }
	YY_BREAK
case 207:
YY_RULE_SETUP
#line 236 "sql_scanner.l"
{ return sql::Parser::make_WRITE(*driver.loc); }
	YY_BREAK
case 208:
YY_RULE_SETUP
#line 237 "sql_scanner.l"
{ return sql::Parser::make_XOR(*driver.loc); }
	YY_BREAK
case 209:
YY_RULE_SETUP
#line 238 "sql_scanner.l"
{ return sql::Parser::make_YEAR(*driver.loc); }
	YY_BREAK
case 210:
YY_RULE_SETUP
#line 239 "sql_scanner.l"
{ return sql::Parser::make_ZEROFILL(*driver.loc); }
	YY_BREAK
/* numbers */
case 211:
YY_RULE_SETUP
#line 242 "sql_scanner.l"
{ return sql::Parser::make_INTNUM(atoi(yytext), *driver.loc); }
	YY_BREAK
case 212:
#line 244 "sql_scanner.l"
case 213:
#line 245 "sql_scanner.l"
case 214:
#line 246 "sql_scanner.l"
case 215:
#line 247 "sql_scanner.l"
case 216:
YY_RULE_SETUP
#line 247 "sql_scanner.l"
{ return sql::Parser::make_APPROXNUM(atof(yytext), *driver.loc); }
	YY_BREAK
/* booleans */
case 217:
YY_RULE_SETUP
#line 250 "sql_scanner.l"
{ return sql::Parser::make_BOOL(true, *driver.loc); }
	YY_BREAK
case 218:
YY_RULE_SETUP
#line 251 "sql_scanner.l"
{ return sql::Parser::make_BOOL(false, *driver.loc); }
	YY_BREAK
/* strings */
case 219:
#line 255 "sql_scanner.l"
case 220:
YY_RULE_SETUP
#line 255 "sql_scanner.l"
{ return sql::Parser::make_STRING(yytext, *driver.loc); }
	YY_BREAK
case 221:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 256 "sql_scanner.l"
{ driver.error(*driver.loc, "Unterminated string"); }
	YY_BREAK
case 222:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 257 "sql_scanner.l"
{  driver.error(*driver.loc, "Unterminated string"); }
	YY_BREAK
/* hex strings */
case 223:
#line 262 "sql_scanner.l"
case 224:
YY_RULE_SETUP
#line 262 "sql_scanner.l"
{ return sql::Parser::make_STRING(yytext, *driver.loc); }
	YY_BREAK
/* bit strings */
case 225:
#line 266 "sql_scanner.l"
case 226:
YY_RULE_SETUP
#line 266 "sql_scanner.l"
{ return sql::Parser::make_STRING(yytext, *driver.loc); }
	YY_BREAK
/* operators */
case 227:
YY_RULE_SETUP
#line 269 "sql_scanner.l"
{ return sql::Parser::make_DOT(*driver.loc); }
	YY_BREAK
case 228:
YY_RULE_SETUP
#line 270 "sql_scanner.l"
{ return sql::Parser::make_MULTIPLY(*driver.loc); }
	YY_BREAK
case 229:
YY_RULE_SETUP
#line 271 "sql_scanner.l"
{ return sql::Parser::make_BRACKET_O(*driver.loc); }
	YY_BREAK
case 230:
YY_RULE_SETUP
#line 272 "sql_scanner.l"
{ return sql::Parser::make_BRACKET_C(*driver.loc); }
	YY_BREAK
case 231:
YY_RULE_SETUP
#line 273 "sql_scanner.l"
{ return sql::Parser::make_SEMICOLON(*driver.loc); }
	YY_BREAK
case 232:
#line 275 "sql_scanner.l"
case 233:
YY_RULE_SETUP
#line 275 "sql_scanner.l"
{ return sql::Parser::make_AND(*driver.loc); }
	YY_BREAK
case 234:
YY_RULE_SETUP
#line 276 "sql_scanner.l"
{ return sql::Parser::make_OR(*driver.loc); }
	YY_BREAK
case 235:
YY_RULE_SETUP
#line 277 "sql_scanner.l"
{ return sql::Parser::make_COMPARISON("=", *driver.loc); }
	YY_BREAK
case 236:
YY_RULE_SETUP
#line 278 "sql_scanner.l"
{ return sql::Parser::make_COMPARISON("<=>", *driver.loc); }
	YY_BREAK
case 237:
YY_RULE_SETUP
#line 279 "sql_scanner.l"
{ return sql::Parser::make_COMPARISON(">=", *driver.loc); }
	YY_BREAK
case 238:
YY_RULE_SETUP
#line 280 "sql_scanner.l"
{ return sql::Parser::make_COMPARISON(">", *driver.loc); }
	YY_BREAK
case 239:
YY_RULE_SETUP
#line 281 "sql_scanner.l"
{ return sql::Parser::make_COMPARISON("<=", *driver.loc); }
	YY_BREAK
case 240:
YY_RULE_SETUP
#line 282 "sql_scanner.l"
{ return sql::Parser::make_COMPARISON("<", *driver.loc); }
	YY_BREAK
case 241:
YY_RULE_SETUP
#line 283 "sql_scanner.l"
{ return sql::Parser::make_COMPARISON("!=", *driver.loc); }
	YY_BREAK
case 242:
YY_RULE_SETUP
#line 284 "sql_scanner.l"
{ return sql::Parser::make_COMPARISON("<>", *driver.loc); }
	YY_BREAK
case 243:
YY_RULE_SETUP
#line 285 "sql_scanner.l"
{ return sql::Parser::make_SHIFT("<<", *driver.loc); }
	YY_BREAK
case 244:
YY_RULE_SETUP
#line 286 "sql_scanner.l"
{ return sql::Parser::make_SHIFT(">>", *driver.loc); }
	YY_BREAK
case 245:
YY_RULE_SETUP
#line 287 "sql_scanner.l"
{ return sql::Parser::make_ASSIGN(*driver.loc); }
	YY_BREAK
case YY_STATE_EOF(INITIAL):
#line 288 "sql_scanner.l"
{ return sql::Parser::make_END(*driver.loc); }
	YY_BREAK
/* user variables */
case 246:
#line 292 "sql_scanner.l"
case 247:
#line 293 "sql_scanner.l"
case 248:
#line 294 "sql_scanner.l"
case 249:
YY_RULE_SETUP
#line 294 "sql_scanner.l"
{ return sql::Parser::make_USERVAR(yytext, *driver.loc); }
	YY_BREAK
case 250:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 296 "sql_scanner.l"
{ driver.error(*driver.loc, "Unterminated quoted user variable");} 
	YY_BREAK
case 251:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 297 "sql_scanner.l"
{  driver.error(*driver.loc, "Unterminated quoted user variable"); }
	YY_BREAK
case 252:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 298 "sql_scanner.l"
{  driver.error(*driver.loc, "Unterminated quoted user variable"); }
	YY_BREAK
/* names */
case 253:
YY_RULE_SETUP
#line 301 "sql_scanner.l"
{ 
 	return sql::Parser::make_NAME(yytext, *driver.loc); 
	}
	YY_BREAK
case 254:
YY_RULE_SETUP
#line 304 "sql_scanner.l"
{ 
	return sql::Parser::make_NAME(yytext, *driver.loc); 
	}
	YY_BREAK
case 255:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 307 "sql_scanner.l"
{ driver.error(*driver.loc, "Unterminated quated name"); 
	}
	YY_BREAK
/* everything else */
case 256:
/* rule 256 can match eol */
YY_RULE_SETUP
#line 311 "sql_scanner.l"
;/* whitespace */
	YY_BREAK
case 257:
YY_RULE_SETUP
#line 314 "sql_scanner.l"
ECHO;
	YY_BREAK
#line 2800 "sql_scanner.cc"

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin.rdbuf();
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */

/* The contents of this function are C++ specific, so the () macro is not used.
 * This constructor simply maintains backward compatibility.
 * DEPRECATED
 */
yyFlexLexer::yyFlexLexer( FLEX_STD istream* arg_yyin, FLEX_STD ostream* arg_yyout ):
	yyin(arg_yyin ? arg_yyin->rdbuf() : std::cin.rdbuf()),
	yyout(arg_yyout ? arg_yyout->rdbuf() : std::cout.rdbuf())
{
	ctor_common();
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::yyFlexLexer( std::istream& arg_yyin, std::ostream& arg_yyout ):
	yyin(arg_yyin.rdbuf()),
	yyout(arg_yyout.rdbuf())
{
	ctor_common();
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::ctor_common()
{
	yy_c_buf_p = 0;
	yy_init = 0;
	yy_start = 0;
	yy_flex_debug = 0;
	yylineno = 1;	// this will only get updated if %option yylineno

	yy_did_buffer_switch_on_eof = 0;

	yy_looking_for_trail_begin = 0;
	yy_more_flag = 0;
	yy_more_len = 0;
	yy_more_offset = yy_prev_more_offset = 0;

	yy_start_stack_ptr = yy_start_stack_depth = 0;
	yy_start_stack = NULL;

	yy_buffer_stack = 0;
	yy_buffer_stack_top = 0;
	yy_buffer_stack_max = 0;

	yy_state_buf = 0;

}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::~yyFlexLexer()
{
	delete [] yy_state_buf;
	yyfree(yy_start_stack  );
	yy_delete_buffer( YY_CURRENT_BUFFER );
	yyfree(yy_buffer_stack  );
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::switch_streams( std::istream& new_in, std::ostream& new_out )
{
	// was if( new_in )
	yy_delete_buffer( YY_CURRENT_BUFFER );
	yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE  ) );

	// was if( new_out )
	yyout.rdbuf(new_out.rdbuf());
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::switch_streams( std::istream* new_in, std::ostream* new_out )
{
	if( ! new_in ) {
		new_in = &yyin;
	}

	if ( ! new_out ) {
		new_out = &yyout;
	}

	switch_streams(*new_in, *new_out);
}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput( char* buf, int /* max_size */ )
#else
int yyFlexLexer::LexerInput( char* buf, int max_size )
#endif
{
	if ( yyin.eof() || yyin.fail() )
		return 0;

#ifdef YY_INTERACTIVE
	yyin.get( buf[0] );

	if ( yyin.eof() )
		return 0;

	if ( yyin.bad() )
		return -1;

	return 1;

#else
	(void) yyin.read( buf, max_size );

	if ( yyin.bad() )
		return -1;
	else
		return yyin.gcount();
#endif
}

void yyFlexLexer::LexerOutput( const char* buf, int size )
{
	(void) yyout.write( buf, size );
}

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
int yyFlexLexer::yy_get_next_buffer()
{
    	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = (yytext_ptr);
	yy_size_t number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (yy_size_t) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				yy_size_t new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    yy_state_type yyFlexLexer::yy_get_previous_state()
{
	yy_state_type yy_current_state;
	char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1053 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
{
	int yy_is_jam;
    	char *yy_cp = (yy_c_buf_p);

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1053 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 1052);

		return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT
    void yyFlexLexer::yyunput( int c, char* yy_bp)
{
	char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		yy_size_t number_to_move = (yy_n_chars) + 2;
		char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}
#endif

    int yyFlexLexer::yyinput()
{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			yy_size_t offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	return c;
}

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyFlexLexer::yyrestart( std::istream& input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Delegate to the new version that takes an istream reference.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
void yyFlexLexer::yyrestart( std::istream* input_file )
{
	yyrestart( *input_file );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

    void yyFlexLexer::yy_load_buffer_state()
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin.rdbuf(YY_CURRENT_BUFFER_LVALUE->yy_input_file);
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream& file, int size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = (yy_size_t)size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Delegate creation of buffers to the new version that takes an istream reference.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
	YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream* file, int size )
{
	return yy_create_buffer( *file, size );
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree((void *) b->yy_ch_buf  );

	yyfree((void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, std::istream& file )

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file.rdbuf();
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

	b->yy_is_interactive = 0;
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yyFlexLexer::yypush_buffer_state (YY_BUFFER_STATE new_buffer)
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yyFlexLexer::yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
void yyFlexLexer::yyensure_buffer_stack(void)
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

    void yyFlexLexer::yy_push_state( int _new_state )
{
    	if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
		{
		yy_size_t new_size;

		(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_start_stack_depth) * sizeof( int );

		if ( ! (yy_start_stack) )
			(yy_start_stack) = (int *) yyalloc(new_size  );

		else
			(yy_start_stack) = (int *) yyrealloc((void *) (yy_start_stack),new_size  );

		if ( ! (yy_start_stack) )
			YY_FATAL_ERROR( "out of memory expanding start-condition stack" );
		}

	(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

	BEGIN(_new_state);
}

    void yyFlexLexer::yy_pop_state()
{
    	if ( --(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

    int yyFlexLexer::yy_top_state()
{
    	return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

void yyFlexLexer::LexerError( yyconst char msg[] )
{
    	std::cerr << msg << std::endl;
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        yy_size_t yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
		
	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
			return (void *) malloc( size );
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
		
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void yyfree (void * ptr )
{
			free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 314 "sql_scanner.l"



namespace sql {
	Scanner::Scanner() : yyFlexLexer() { }
	
	Scanner::~Scanner() { }

	void Scanner::set_debug(bool b) {
		yy_flex_debug = b;
	}
}

#ifndef yylex
#undef yylex
#endif

int yyFlexLexer::yylex() {
	cerr << "call yyFlexLexer::yylex()!" << endl;
	return 0;
}

